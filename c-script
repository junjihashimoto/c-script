#!/usr/bin/env perl
use File::Basename;
use Cwd qw(realpath getcwd);
use Digest::MD5 qw(md5_hex);
use Getopt::Long;
use Data::Dumper;
use File::Temp qw/ tempfile /;
use strict;

our $script_home;
our $script_name;
our $debug;
our $home;
our $main_src;
our $dependent_src;
our $sys_src;
our $run_dir;
our $exp;
our $source_filter=sub{$_[0]};

our $cc;
our $debug_opt;
our $exe;
our $output_binary;
our $inc;
our $libs;
our $mod_main_src;
our $normal_opt;
our $opt;
our $other_src;
our $no_chk_main;
our $no_cache;

our $syntax;

our $gdb;
our $ddd;

our $mingw32;
our $static;
our $linux;
our $win;
our $init_script;
our $output_opt;
our @dirs;
our $show_code;
our $show_cmd;
our $show_depend;
our $clean;

our $default_header;

our %auto_package;
our %load_package;

#local @dirs;

$init_script="init.pl";

$linux = $^O eq "linux" ? 1 : 0;
$win   = $^O eq "MSWin32" ? 1 : 0;

sub show_usage{
    print << "END_OF_USAGE";
Usage: c-script [options] script-file [script-options]
    -o binary     just output compiled binary, not run the program
    -e expression read expression from command-line, not read script-file
    -mingw32      use mingw32 for linux
    -static       use '-static' option for gcc
    -syntax       use '-fsyntax-only' option for gcc
    -no_chk_main  disable of main-function-insertion
    -nocache      compile the program everytime
    -d            run the program under the gdb
    -dargs        run the program under the gdb with --args
    -gdb          run the program under the gdb
    -ddd          run the program under the ddd
    -vc           run the program under the visual studio
    -show         output code after preprocess
    -cmd          output compiler-options
    -depend       output dependent files
    -clean        remove cache of both exe and source
END_OF_USAGE
}

sub set_exp_file{
    my ($exp)=@_;
    my ($exe,$suffix)=gen_exe($exp);
    my $file=${exe}.${suffix};
    if(! -f $file) {
	local* OUT; 
	open OUT,">$file";
	print OUT "  ";
	print OUT $exp;
	print OUT "\n";
	close OUT;
    }
    return $file;
}

sub get_cmd_options{
    while(1){
	my $op=$ARGV[0];
	if($#ARGV==-1){
	    show_usage;
	    exit;
	}elsif ( $op eq "-o"){
	    shift @ARGV;
	    $output_binary=shift @ARGV;
	    next;
	}elsif ( $op eq "-mingw32"){
	    $mingw32=1;
	    shift @ARGV;
	    next;
	}elsif ( $op eq "-e"){
	    shift @ARGV;
	    $exp=shift @ARGV;
	    last;
	}elsif ( $op eq "-static"){
	    $static=1;
	    shift @ARGV;
	    next;
	}elsif ( $op eq "-no_chk_main"){
	    $no_chk_main=1;
	    shift @ARGV;
	    next;
	}elsif ( $op eq "-nocache"){
	    $no_cache=1;
	    shift @ARGV;
	    next;
	}elsif ( $op eq "-syntax"){
	    $syntax=1;
	    $no_cache=1;
	    shift @ARGV;
	    next;
	}elsif ( $op eq "-d"){
	    $debug="gdb";
	    shift @ARGV;
	    #next;
	    last;
	}elsif ( $op eq "-dargs"){
	    $debug="gdb-args";
	    shift @ARGV;
	    #next;
	    last;
	}elsif ( $op eq "-gdb"){
	    $debug="gdb";
	    shift @ARGV;
	    last;
	}elsif ( $op eq "-ddd"){
	    $debug="ddd";
	    shift @ARGV;
	    last;
	}elsif ( $op eq "-vc"){
	    $debug="vc";
	    shift @ARGV;
	    last;
	}elsif ( $op eq "-show"){
	    $show_code=1;
	    shift @ARGV;
	    next;
	}elsif ( $op eq "-cmd"){
	    $show_cmd=1;
	    shift @ARGV;
	    next;
	}elsif ( $op eq "-depend"){
	    $show_depend=1;
	    shift @ARGV;
	    next;
	}elsif ( $op eq "-clean"){
	    $clean=1;
	    shift @ARGV;
	    next;
	}elsif (-e $op ){
	    last;
	}else{
	    show_usage;
	    exit;
	}
    }
}

sub init{
    if($win){
	$home=$script_home."/.c-script";
    }else{
	$home=$ENV{HOME}."/.c-script";
    }

}

sub setup{
    if($clean){
	my $h=$home."/cache";
	for(glob $h."/*"){
	    unlink $_;
	}
    }

    if($exp){
	unshift @ARGV,set_exp_file($exp);
    }

    $script_home=realpath(dirname  $0);
    $script_name=basename $0;


    if($debug){
	for(@ARGV){
	    if( -f $_){
		$main_src=$_;
		last;
	    }
	}
    }else{
	$main_src=realpath(shift @ARGV);
    }

    $main_src=~s/\\/\//g if($win); 

    $run_dir=dirname $main_src;

#    for(glob $script_home."/*.h"){
#	$inc.=" ".realpath($1);
#	print $1;
#    }
#    print $inc;
#    exit;

}


sub getlib{
    my $path=shift;
    my @g=glob($path);
    my $g=$g[0];
    if(! -f $g){
	return "";
    }else{
	$g=basename $g;
	$g=~ s/^lib//g;
	$g=~ s/\.so$//g;
	$g=~ s/\.a$//g;
	return "-l".$g."\n";
    }
}

sub load_init_pl{
    my $file=shift;    
    my ($suffix)=($file =~ /\.([^.]*$)/);
    
    if(-e "$home/init/$init_script"){
	do "$home/init/$init_script";
    }else{
	do "$script_home/init/$init_script";
    }

    if(-e "$home/init/suffix_${suffix}.pl"){
    	do "$home/init/suffix_${suffix}.pl";
    }elsif(-e "$script_home/init/suffix_${suffix}.pl"){
    	do "$script_home/init/suffix_${suffix}.pl";
    }

    $normal_opt =~ s/\n/ /g;
    $debug_opt  =~ s/\n/ /g;
    $opt        =~ s/\n/ /g;
    $libs       =~ s/\n/ /g;
    $sys_src    =~ s/\n/ /g;
    
    if($debug){
	$opt=$debug_opt.' '.$opt;
    }else{
	$opt=$normal_opt.' '.$opt;
    }
    
    if($syntax){
	$opt.=' '."-fsyntax-only";
    }

}

sub modtime{
    my $filepath=shift;
    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,
	$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat($filepath);
    return $mtime;
}


sub gen_exe{
    my ($main_src,$inc,$other_src)=@_;
    my ($s)=split ' ', md5_hex("$main_src$inc$other_src");
    my ($suffix)=($main_src =~ /(\.[^.]*$)/);
    my $h=$home."/cache";
    if(!$suffix||$exp){
	$suffix=".cpp";
    }
    if( ! -d $home){
	mkdir "$home";
    }
    if( ! -d $h){
	mkdir "$h";
    }
    
    return ($h.'/'.$s.$debug.".exe",$suffix);
}

sub gen_exename{
    my ($exe,$suffix)=gen_exe $main_src,$inc,$other_src;
    
    if($debug){
	for(@ARGV){
	    if( -f $_){
		$_=$exe;
		last;
	    }
	}
    }

    return ($exe.$suffix,$exe);
}

sub system2{
    my $cmd=shift;
    local* IN;
    my ($fh, $filename) = tempfile();
    open IN , "| /bin/bash > $filename" or die "Cannot open bash: $!";
    print IN "$cmd";
    close IN;
    
    local $/;
    open IN,"<$filename";
    my $str=<IN>;
    close IN;
    return $str;
}

sub gen_src_str{
    my $str    =shift;
    my $add_line=shift;
    my $line=1;
    my $code;
    my $inline_code;
    my $head;
    my $tail;
    my $stat=0;
    $str =~ s{^.*$}{
      $line++;
      $_=$&."\n";

      if ($stat==0) {
	if (/^#!.*/) {
	  $code.="\n";
	} elsif (/^#pragma\s+c-script:eval_begin/) {
	  $stat=1;
	} elsif (/^#pragma\s+c-script.*$/) {
	  $code.="#line $line  \"$main_src\"\n" if $add_line;
	} elsif (/^(.*)\[\[(.*)\]\](.*)$/) {
	  $inline_code=system2 "$2";
	  chomp $inline_code;
	  $code.="$1".$inline_code."$3\n";
	  $code.="#line $line  \"$main_src\"\n" if $add_line;
	} elsif (/^(.*)\[\[(.*)$/) {
	  $head=$1;
	  $inline_code=$2;
	  $stat=2;
	} else {
	  $code.=$_;
	}
      } elsif ($stat==1) {
	if (/^#pragma\s+c-script:eval_end/) {
	  $stat=0;
	  $code.="#line $line  \"$main_src\"\n" if $add_line;
	}
      } elsif ($stat==2) {
	if (/^(.*)\]\](.*)$/) {
	  $inline_code.=$1;
	  $tail=$2;
	  $inline_code=system2 "$inline_code";
	  chomp $inline_code;
	  $code.=$head.$inline_code.$tail."\n";
	  $code.="#line $line  \"$main_src\"\n" if $add_line;
	  $stat=0;
	}else{
	  $inline_code.=$_;
	}
      }
    }egm;
    return $code;
  }

sub gen_src{
    my ($main_src,$mod_main_src)=@_;
    my $code="";
    my $nomain=1;

    my ($suffix)=($script_name =~ /\.([^.]*$)/);
    local* IN_MAIN;
    local* IN;
    local* OUT;

    if(!$no_chk_main){
	open IN_MAIN,"<$main_src";
	while(<IN_MAIN>){
	    if(/main|Main/){
		$nomain=0;
		last;
	    }
	}
	close IN_MAIN;
    }
    

    
    $code.=$source_filter->(gen_src_str($default_header,0));
    
    $code.="int main(int argc,char** argv){\n" if($nomain);
    
    $code.="#line 1  \"$main_src\"\n";
    
    $code.=$source_filter->(gen_src_str(file2str($main_src),1));
    
    $code.="  return 0;\n}\n" if($nomain);
    open OUT,">$mod_main_src";
    print OUT $code;
    close OUT;
    if($show_code){
	print $code;
	exit;
    }
}

sub file2str{
    my $file=shift;
    local *IN;
    open IN,"<$file";
    local $/;
    my $str=<IN>;
    close IN;
    return $str;
}

sub file2words{
    my $file=shift;
    local *IN;
    open IN,"<$file";
    my %w;
    map{s/\w+/$w{$&}++/ge}<IN>;
    close IN;
    return sort{$w{$b}-$w{$a}}keys %w;
}

sub set_package{
    my $package=shift;
    return if(exists $load_package{$package});
    $load_package{$package}=1;
    my $file=$script_home."/package/".$package;
    if(-e $file){
	getparam($file);
	$default_header.=file2str($file)."\n";
    }elsif( -e $package) {
	getparam($package);
	$default_header.=file2str($package)."\n";
    }
}
sub load_auto_package{
    my $file=shift;
    for (file2words($file)){
	if (exists $auto_package{$_}){
	    set_package($auto_package{$_});
	}
    }
}

sub streval{
    my $file=shift;
    eval '"'.$file.'"';
}

sub realpath2{
    my $file=shift;
    my $str=realpath(streval($file));
    if( -e $str){
	return $str;
    }else{
	$file;
    }
}

sub getparam{
    my $file=shift;
    local *IN;
    
    open IN,"<$file";
    while(<IN>){
	if(/^#pragma\s+c-script:src\s+(.*)/){
	    for(split ' ',$1){
		$other_src.=" ".realpath2($_);
	    }
	}elsif(/^#pragma\s+c-script:depend\s+(.*)/){
	    for(split ' ',$1){
		$dependent_src.=" ".realpath2($_);
	    }
	}elsif(/^#pragma\s+c-script:use\s+(.*)/){
	    set_package($1);
	}elsif(/^#pragma\s+c-script:header\s+(.*)/){
	    $default_header.=$1."\n";
	}elsif(/^#pragma\s+c-script:header_begin/){
	    while(<IN>){
		last if(/^#pragma\s+c-script:header_end/);
		$default_header.=$_;
	    }
	}elsif(/^#pragma\s+c-script:opt\s+(.*)/){
	    $opt.=" ".streval($1);
	}elsif(/^#pragma\s+c-script:eval_begin/){
	    my $eval_exp;
	    while(<IN>){
		last if(/^#pragma\s+c-script:eval_end/);
		$eval_exp.=$_;
	    }
	    eval $eval_exp;
	    
	}elsif(/^#pragma\s+c-script:eval\s+(.*)/){
	    eval $1;
	}elsif(/^#pragma\s+c-script:do\s+(.*)/){
	    do $1;
	}elsif(/^#pragma\s+c-script:cc\s+(.*)/){
	    $cc=$1;
	}elsif(/^#pragma\s+c-script:libs\s+(.*)/){
	    for(split ' ',$1){
		$libs=realpath2($_)." ".$libs;
	    }
	}elsif(/^#pragma\s+c-script:no_cache/){
	    $no_cache=1;
	}elsif(/^#pragma\s+c-script:no_default_header/){
	    $default_header="\n";
	}elsif(/^#include\s+"([^"]+)/){
	    $inc.=" ".realpath2($1);
	}
    }
    close IN;
}


sub pushd{
    push @dirs,getcwd();
    chdir $_[0];
}
sub popd{
    chdir (pop @dirs);
}
sub chmodx{
    open(my $fh, "<", $_[0]);
    my $perm = (stat $fh)[2] & 07777;
    chmod($perm | 0100, $fh);
    close $fh;
}
sub compile{
    pushd $run_dir;
    my $cmd="$cc $opt $output_opt$exe $mod_main_src $other_src $sys_src $libs";
    if($show_cmd){
	print $cmd,"\n";
    }
    `$cmd`;
    my $exit_value = $? >> 8;
    popd();
    exit if($exit_value!=0);
    chmodx $exe if(!$win);
}


sub run{
    if($debug eq "gdb"){
	exec 'gdb',@ARGV;
    }elsif($debug eq "gdb-args"){
	exec 'gdb','--args',@ARGV;
    }elsif($debug  eq "ddd"){
	exec 'ddd',@ARGV;
    }elsif($debug eq "vc"){
	$exe=~s/\//\\/g;
	print 'vcexpress','/debugexe',$exe,@ARGV;
	exec 'vcexpress','/debugexe',"${exe}.exe",@ARGV;
    }else{
	exec $exe,@ARGV;
    }
}

sub compilep{
    my ($exe,$main_src,$other_src,$inc)=@_;
    my $c=0;
    if(! -e $exe){
	$c=1;
    }else{
	my @files;
	my $t=modtime( $exe);
	push @files,$main_src;
	push @files,(split ' ',$dependent_src);
	push @files,(split ' ',$other_src);
	push @files,(split ' ',$inc);
	
	for(@files){
	    if((-e $_) && ($t < modtime($_))){
		$c=1;
		last;
	    }
	}
    }
    return $c;
}

init();

get_cmd_options();

setup();

load_init_pl($main_src);

load_auto_package($main_src);
getparam($main_src);

($mod_main_src,$exe)=gen_exename();

$exe=$output_binary if($output_binary);

if($show_depend){
    for(($main_src,(split ' ',$dependent_src." ".$other_src." ".$inc))){
	if( -e $_){
	    printf("%s\n",$_);
	}
    }
    exit 0;
}


if($syntax || (!$no_cache && compilep($exe,$main_src,$other_src,$inc))){
    gen_src($main_src,$mod_main_src);
    compile();
}

if($syntax||$output_binary){
    exit 0;
}
    

run();


